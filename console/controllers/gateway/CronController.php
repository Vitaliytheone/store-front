<?php

namespace console\controllers\gateway;

use common\models\gateways\PaymentMethods;
use common\models\gateways\SitePaymentMethods;
use common\models\gateways\Sites;
use common\models\gateway\Payments;
use payments\Payment;
use payments\methods\Paypal;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * Class CronController
 * @package console\controllers\gateway
 */
class CronController extends CustomController
{
    public $method;

    public function options($actionID)
    {
        return ['method'];
    }

    /** @inheritdoc */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        Yii::$app->db->commandClass = '\gateway\components\db\Command';
    }

    /**
     * Cron to check payments status with status pending
     */
    public function actionCheckPayments()
    {
        Yii::$app->db->createCommand('SET SESSION wait_timeout = 28800;')->execute();
        Yii::$app->db->createCommand('SET SESSION interactive_timeout = 28800;')->execute();

        $gateways = Sites::find()
            ->active()
            ->all();

        if (empty($this->method)) {
            $this->method = [
                PaymentMethods::METHOD_PAYPAL,
            ];
        } else {
            $this->method = (array)explode(",", $this->method);
        }

        foreach ($gateways as $gateway) {

            Yii::$app->gateway->setInstance($gateway);

            if (in_array(PaymentMethods::METHOD_PAYPAL, $this->method)) {
                $this->_checkPaypalPayment($gateway);
            }
        }
    }

    /**
     * @param Sites $gateway
     */
    protected function _checkPaypalPayment(Sites $gateway)
    {
        $sitePaymentMethod = SitePaymentMethods::find()
            ->andWhere([
                'site_id' => $gateway->id,
                'method_id' => PaymentMethods::METHOD_PAYPAL,
                'visibility' => 1
            ])
            ->innerJoinWith('method')
            ->one();

        if (empty($sitePaymentMethod)) {
            return;
        }

        /**
         * @var $component Paypal
         */
        $component = Payment::getPayment($sitePaymentMethod->method->class_name);
        $component->setPaymentMethod([
            'id' => $sitePaymentMethod->id,
            'method_id' => $sitePaymentMethod->method_id,
            'name' => $sitePaymentMethod->method->method_name,
            'url' => $sitePaymentMethod->method->url,
            'options' => $sitePaymentMethod->getOptionsDetails(),
        ]);
        $component->setGateway($gateway);

        foreach (Payments::find()->andWhere([
            'method_id' => PaymentMethods::METHOD_PAYPAL,
            'status' => Payments::STATUS_WAITING,
            'response' => 1,
        ])->andWhere("transaction_id <> ''")->batch() as $payments) {
            foreach ($payments as $payment) {
                $component->checkStatus($payment);
            }
        }
    }
}
