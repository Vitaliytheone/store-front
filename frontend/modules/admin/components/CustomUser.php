<?php

namespace frontend\modules\admin\components;

use common\models\stores\StoreAdmins;
use Yii;
use yii\web\IdentityInterface;
use yii\web\User;


/**
 * Class CustomUser
 * @package frontend\modules\admin\components
 */
class CustomUser extends User
{
    const SESSION_AUTH_KEY_NAME = 'auth_key';
    
    /** @inheritdoc */
    protected function beforeLogin($identity, $cookieBased, $duration)
    {
        /** @var StoreAdmins $identity */
        $identity->ip = Yii::$app->getRequest()->getUserIP();
        $identity->last_login = time();

        // Prepare Cookie auth key
        $identity->generateAuthKey();
        $identity->save();

        // Prepare session auth key
        $session = Yii::$app->getSession();
        $session->set(self::SESSION_AUTH_KEY_NAME, $identity->auth_hash);

        return parent::beforeLogin($identity, $cookieBased, $duration); // TODO: Change the autogenerated stub
    }

    /** @inheritdoc */
    protected function afterLogout($identity)
    {
        /** @var StoreAdmins $identity */
        $identity->auth_hash = null;
        $identity->save();

        parent::afterLogout($identity); // TODO: Change the autogenerated stub
    }

    /** @inheritdoc */
    protected function renewAuthStatus()
    {
        $session = Yii::$app->getSession();
        $id = $session->getHasSessionId() || $session->getIsActive() ? $session->get($this->idParam) : null;

        if ($id === null) {
            $identity = null;
        } else {
            /* @var $class IdentityInterface */
            $class = $this->identityClass;
            $identity = $class::findIdentity($id);
        }

        $this->setIdentity($identity);

        if ($identity !== null && !$identity->validateAuthKey($session->get(static::SESSION_AUTH_KEY_NAME))) {
            $this->logout(true);
        }

        if ($identity !== null && ($this->authTimeout !== null || $this->absoluteAuthTimeout !== null)) {
            $expire = $this->authTimeout !== null ? $session->get($this->authTimeoutParam) : null;
            $expireAbsolute = $this->absoluteAuthTimeout !== null ? $session->get($this->absoluteAuthTimeoutParam) : null;
            if ($expire !== null && $expire < time() || $expireAbsolute !== null && $expireAbsolute < time()) {
                $this->logout(false);
            } elseif ($this->authTimeout !== null) {
                $session->set($this->authTimeoutParam, time() + $this->authTimeout);
            }
        }

        if ($this->enableAutoLogin) {
            if ($this->getIsGuest()) {
                $this->loginByCookie();
            } elseif ($this->autoRenewCookie) {
                $this->renewIdentityCookie();
            }
        }
    }
}