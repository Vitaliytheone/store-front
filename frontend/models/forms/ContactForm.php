<?php

namespace frontend\models\forms;

use common\components\email\Mailgun;
use common\models\stores\Stores;
use Yii;
use yii\base\Exception;
use yii\base\Model;
use yii\helpers\ArrayHelper;
use yii\behaviors\AttributeBehavior;

/**
 * Class ContactForm
 * @package frontend\models\forms
 */
class ContactForm extends Model
{
    public $subject;
    public $name;
    public $email;
    public $message;
    public $recaptcha;

    public $error;
    public $success;

    public $errorMessage;

    /** @var  Stores */
    private $_store;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->_store = Yii::$app->store->getInstance();

        // Get sent result from session
        $this->setSentResult(Yii::$app->session->getFlash('sent_result'));
    }

    public function formName()
    {
        return '';
    }

    public function rules()
    {
        return [
            [['subject', 'name', 'email', 'message', 'recaptcha'], 'required'],
            [['subject', 'name', 'message'], 'string'],
            ['email', 'emailValidator'],
            ['recaptcha', 'recaptchaValidator', 'message' => 'reCAPTCHA validation error! Try some times latter!'],
        ];
    }

    public function load($data, $formName = null)
    {
        $this->setAttributes([
            'recaptcha' =>  ArrayHelper::getValue($data, 'g-recaptcha-response')
        ]);

        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * Set sent action result
     * @param $sentResult bool|null
     */
    public function setSentResult($sentResult)
    {
        if (!is_bool($sentResult)) {
            $this->success = false;
            $this->error = false;
            return;
        }

        $this->success = $sentResult;
        $this->error = !$sentResult;

        $this->errorMessage = $sentResult ? Yii::t('app', 'contact.form.message.success') : Yii::t('app', 'contact.form.message.error');
    }

    /**
     * Validating and sent contact form
     * @return bool
     */
    public function contact()
    {
        $text = $this->name . PHP_EOL . $this->email . PHP_EOL . Yii::$app->getRequest()->userIP . PHP_EOL . PHP_EOL . $this->subject . PHP_EOL . PHP_EOL . $this->message . PHP_EOL;

        $sentResult = (bool)Mailgun::send($this->_store->admin_email, $this->subject, $text);

        if ($sentResult) {
            // Store sent result to session
            Yii::$app->session->setFlash('sent_result', $sentResult);
        }  else {
            $this->setSentResult($sentResult);
        }

        return $sentResult;
    }

    /**
     * Custom email validator
     * @param $attribute
     * @param $params
     * @param $validator
     * @return bool
     */
    public function emailValidator($attribute, $params, $validator) {
        if ($this->$attribute !== filter_var($this->$attribute, FILTER_VALIDATE_EMAIL)) {
            return false;
        }
        return true;
    }

    /**
     * Custom reCAPTCHA validator
     * @param $attribute
     * @param $params
     * @param $validator
     * @return bool
     * @throws Exception
     */
    public function recaptchaValidator($attribute, $params, $validator) {

        $recaptchaResponse = $this->$attribute;

        $cKey = ArrayHelper::getValue(Yii::$app->params, 'reCaptcha.siteKey');
        $cSecret = ArrayHelper::getValue(Yii::$app->params, 'reCaptcha.secret');

        if (!$cKey || !$cSecret) {
            throw new Exception('reCAPTCHA is not yet configured! Check your app config params!');
        }

        $response = static::_request($cSecret, $recaptchaResponse);
        $responseHostName = ArrayHelper::getValue($response, 'hostname', null);
        $responseSuccess = ArrayHelper::getValue($response, 'success', null);

        // Check domains
        if ($this->_store->domain !== $responseHostName) {
            return false;
        }

        // Check captcha
        if (!$responseSuccess) {
            return false;
        }

        return true;
    }


    /**
     * Captcha validation request
     * @param $secret
     * @param $response
     * @return bool|mixed
     */
    private static function _request($secret, $response)
    {
        // Get cURL resource
        $ch = curl_init();
        // Set some options - we are passing in a useragent too here
        curl_setopt_array($ch, array(
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL => 'https://www.google.com/recaptcha/api/siteverify',
            CURLOPT_POST => 1,
            CURLOPT_POSTFIELDS => [
                'secret' => $secret,
                'response' => $response,
            ]
        ));

        $response = curl_exec($ch);

        if (curl_errno($ch)) {
            $firstError = curl_error($ch);
            curl_close($ch);

            // throw new Exception("Curl initialisation error: $firstError");
            return false;
        }

        curl_close($ch);

        $jsonResponse = json_decode($response, true);

        return $jsonResponse;
    }

}